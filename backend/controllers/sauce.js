// Import of schema of data
const Sauce = require('../models/Sauce');
// Import of file system package
const fs = require('fs');

// // Export of 'create', 'getOne', 'modify', 'delete', 'getAll', 'createLike', 'createDislike'
exports.createSauce = (req, res, next) => {
    const sauceObject = JSON.parse(req.body.sauce); //modification of format of the request for change into object
    delete sauceObject._id; //delete the id sent by the front-end
    const sauce = new Sauce({ //create a new instance of the model Sauce
        ...sauceObject,//collect the informations "name, descriptions, ..." with spread
        // collect the url of image generated by Multer
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`,
        likes: 0,
        dislikes: 0,
        usersLiked: [' '],
        usersdisLiked: [' '],
    });
    sauce.save() //save the sauce in the database
    //creation of Promise
        .then(() => res.status(201).json({ 
        message: 'Sauce has been saved !'
        })) // the response of success code 201
        .catch(error =>  res.status(400).json({ 
        error
        })); // the response of error code 400
    };

// Export of picking up one particular sauce 
exports.getOneSauce = (req, res, next) => {
    Sauce.findOne({ // definition with Params of the same id as the sauce requested
        _id: req.params.id 
    }) //creation of Promise
        .then((sauce) => {
            res.status(200).json(sauce) //ã€€the response of success code 200
        })
        .catch((error) => { 
            res.status(404).json({
            error // the response of error code 404, sauce not found
        })
    })
};


// Export of modifying one sauce
exports.modifySauce = (req, res, next) => {
    // creation of a new object if threre's the image to moodify
    const sauceObject = req.file ? { // if there's a file?
        // if yes, collect the infos of objects
        ...JSON.parse(req.body.sauce),
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`
        } : { 
            // if not, stay with the original image
            ...req.body 
        }; 

        Sauce.updateOne({ 
            _id: req.params.id
        },{
            ...sauceObject,
            _id: req.params.id
        })
        .then(res.status(200).json({
            message: 'Sauce modified!'
        }))
        .catch(error => res.status(400).json({
            error
        }));
};

// Export of deleting sauce
exports.deleteSauce = (req, res, next) => {
    Sauce.findOne({ 
        _id: req.params.id //collect the object to delete with 'fineOne' and id
        }) 
        .then(sauce => {  //creation of Promise
            // collect file 
            const filename = sauce.imageUrl.split('/images/')[1]; 
            // delete the file with unlink
            fs.unlink(`images/${filename}`, () => {  
                Sauce.deleteOne({ 
                    _id: req.params.id 
                })
                .then(() => res.status(200).json({ 
                    // response of success code 200
                 message: 'Sauce has been deleted !'
                }))
                .catch(error => res.status(400).json({
                    // response of error code 401
                 error 
                }));
            });
        })
        .catch(error => res.status(500).json({
            // response of error code 500 
            error 
        }));
};


// Export of collect all sauces
exports.getAllSauces = (req, res, next) => {
    Sauce.find() // collect the list of all sauces with 'find'
        // creation of Promise
        .then(sauces => res.status(200).json(sauces))
        .catch(error => res.status(400).json({ 
            error 
            })
        )}

// Export of liking or disliking a sauce
exports.createLike = (req, res, next) => {
    let like = req.body.like
    let userId = req.body.userId
    let sauceId = req.params.id
    
    switch (like) {
      case 1 :
          Sauce.updateOne({ _id: sauceId }, { $push: { usersLiked: userId }, $inc: { likes: +1 }})
            .then(() => res.status(200).json({ message: 'I like it!' }))
            .catch((error) => res.status(400).json({ error }))
              
        break;
  
      case 0 :
          Sauce.findOne({ _id: sauceId })
             .then((sauce) => {
              if (sauce.usersLiked.includes(userId)) { 
                Sauce.updateOne({ _id: sauceId }, { $pull: { usersLiked: userId }, $inc: { likes: -1 }})
                  .then(() => res.status(200).json({ message:  'Neutral' }))
                  .catch((error) => res.status(400).json({ error }))
              }
              if (sauce.usersDisliked.includes(userId)) { 
                Sauce.updateOne({ _id: sauceId }, { $pull: { usersDisliked: userId }, $inc: { dislikes: -1 }})
                  .then(() => res.status(200).json({ message: 'Neutral' }))
                  .catch((error) => res.status(400).json({ error }))
              }
            })
            .catch((error) => res.status(404).json({ error }))
        break;
  
      case -1 :
          Sauce.updateOne({ _id: sauceId }, { $push: { usersDisliked: userId }, $inc: { dislikes: +1 }})
            .then(() => { res.status(200).json({ message: 'I do not like it' }) })
            .catch((error) => res.status(400).json({ error }))
        break;
        
        default:
          console.log(error);
    }
  }




